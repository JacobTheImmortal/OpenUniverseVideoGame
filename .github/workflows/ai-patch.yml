name: AI Patch Bot

on:
  issue_comment:
    types: [created]

jobs:
  patch:
    if: ${{ startsWith(github.event.comment.body, '/gpt ') }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN:       ${{ secrets.BOT_GH_TOKEN }}

    steps:
    # 1️⃣  Checkout the repo
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2️⃣  Install Python deps (openai)
    - name: Set up Python and install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "openai>=0.28,<1.0"

    # 3️⃣  Extract the user’s prompt (strip the /gpt prefix)
    - name: Extract user prompt
      id: prompt
      run: |
        body="${{ github.event.comment.body }}"
        echo "PROMPT=${body:5}" >> "$GITHUB_ENV"

    # 4️⃣  Call GPT-4o-mini, create a patch, apply it on a new branch
    - name: Run GPT-4o-mini to generate patch
      run: |
        python - <<'PY'
        import os, subprocess, pathlib, tempfile, openai, textwrap

        openai.api_key = os.environ["OPENAI_API_KEY"]
        prompt         = os.environ["PROMPT"]

        # --- files to give the model as context ---------------------------
        ctx_files = [
            "A Fun Universe/Assets/Shaders/AtmosphereScattering.shader",
            "A Fun Universe/Assets/Scripts/AtmosphereShell.cs"
        ]
        context = ""
        for f in ctx_files:
            p = pathlib.Path(f)
            if p.exists():
                context += f"\n===== {p} =====\n{p.read_text()}\n"

        system_msg = (
            "You are an AI Unity-game-dev assistant. "
            "Return **ONLY** a valid unified diff that Git can apply, "
            "starting with ---/+++ lines.  Do not wrap the diff in code fences. "
        )

        messages = [
            {"role": "system", "content": system_msg},
            {"role": "user",
             "content": f"The user said: {prompt}\n\nCurrent code:\n{context}"}
        ]

        resp  = openai.ChatCompletion.create(model="gpt-4o-mini", messages=messages, temperature=0.2)
        patch = resp.choices[0].message.content.strip()

        # save diff to tmp file
        with tempfile.NamedTemporaryFile(delete=False, mode="w", encoding="utf-8") as tmp:
            tmp.write(patch)
            tmp_path = tmp.name

        # apply on new branch
        subprocess.run(["git", "checkout", "-b", "ai-patch"], check=True)
        subprocess.run(["git", "apply", tmp_path], check=True)
        subprocess.run(["git", "add", "-u"], check=True)
        subprocess.run(["git", "commit", "-m", f'AI patch: {prompt[:72]}'], check=True)
        PY

    # 5️⃣  Push branch and open PR
    - name: Push branch & open PR
      run: |
        git push -u origin HEAD
        gh pr create \
          --title  "AI patch: ${{ env.PROMPT }}" \
          --body   "Automated patch generated from comment: ${{ github.event.comment.html_url }}" \
          --head   ai-patch \
          --base   main