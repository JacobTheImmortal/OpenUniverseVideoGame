name: AI Patch Bot
on:
workflow_dispatch:   # ← lets you press a “Run workflow” button
  issue_comment:
    types: [created]

jobs:
  patch:
    if: ${{ startsWith(github.event.comment.body, '/gpt ') }}
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN: ${{ secrets.BOT_GH_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract user prompt
        id: prompt
        run: |
          echo "PROMPT<<EOF" >> $GITHUB_ENV
          # strip the leading "/gpt "
          echo "${{ github.event.comment.body }}" | sed 's/^\/gpt //' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Run GPT-4 to generate patch
        run: |
          python - <<'PY'
          import os, subprocess, json, textwrap, openai, pathlib, re, sys, tempfile
          openai.api_key = os.environ["OPENAI_API_KEY"]
          prompt = os.environ["PROMPT"]
          # --- collect context (example: just atmosphere files, tweak as you like) ---
          ctx_files = ["A Fun Universe/Assets/Shaders/AtmosphereScattering.shader",
                       "A Fun Universe/Assets/Scripts/AtmosphereShell.cs"]
          context = ""
          for f in ctx_files:
              try:
                  context += f"\n===== {f} =====\n" + pathlib.Path(f).read_text()
              except FileNotFoundError:
                  pass
          system = "You are an AI game-dev assistant. Return ONLY a unified diff starting with ---/+++."
          user = f"The user said: {prompt}\n\nCurrent code:\n{context}"
          resp = openai.ChatCompletion.create(model="gpt-4o-mini", messages=[{"role":"system","content":system},
                                                                             {"role":"user","content":user}],
                                              temperature=0.2)
          patch = resp.choices[0].message.content
          # save patch to tmp file
          tmp = tempfile.NamedTemporaryFile(delete=False)
          tmp.write(patch.encode())
          tmp.close()
          # apply patch on new branch
          subprocess.run(["git","checkout","-b","ai-patch"], check=True)
          subprocess.run(["git","apply", tmp.name], check=True)
          subprocess.run(["git","add","-u"], check=True)
          subprocess.run(["git","commit","-m",f'AI patch: {prompt[:50]}'], check=True)
          PY
      - name: Push branch & open PR
        run: |
          git push -u origin HEAD
          gh pr create --title "AI patch: ${{ env.PROMPT }}" \
                       --body  "Automated patch generated from comment: `${{ github.event.comment.html_url }}`" \
                       --head  ai-patch \
                       --base  main
